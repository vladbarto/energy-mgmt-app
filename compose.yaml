# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose

services:
  traefik:
    image: traefik:v3.2
    command:
      - --api.insecure=true
      - --providers.docker
      - --accesslog=true
      - --accesslog.filepath=/var/log/traefik/access.log
      - --log.level=DEBUG
      - --entrypoints.web.address=:80
    ports:
      - "80:80"
      - "8080:8080"
    depends_on:
      - BazaDateUser # userContainer
      - BazaDateDevices # deviceContainer
      - BazaDateMonitoring # monitoringContainer
      - front-app
      - login-app
      - user-app
      - device-app
      - monitoring-app
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      # - traefik_logs:/var/log/traefik
    networks:
      - app-network

  BazaDateUser:
    image: postgres:latest
    container_name: userContainer
    restart: always
    environment:
      POSTGRES_DB: user-db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: root
    # ports:
    #   - "5433:5432"
    volumes:
      - user_db_data:/var/lib/postgresql/data
      # - ./init-user-db.sql:/docker-entrypoint-initdb.d/init-user-db.sql  # Mount the init script
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  BazaDateDevices:
    image: postgres:latest
    container_name: deviceContainer
    restart: always
    environment:
      POSTGRES_DB: device-db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    # ports:
    #   - "5434:5432"
    volumes:
      - device_db_data:/var/lib/postgresql/data
      # - ./init-device-db.sql:/docker-entrypoint-initdb.d/init-device-db.sql  # Mount the init script
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  BazaDateMonitoring:
    image: postgres:latest
    container_name: monitoringContainer
    restart: always
    environment:
      POSTGRES_DB: monitoring-db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    # ports:
    #   - "5435:5432"
    volumes:
      - monitoring_db_data:/var/lib/postgresql/data
      # - ./init-monitoring-db.sql:/docker-entrypoint-initdb.d/init-monitoring-db.sql  # Mount the init script
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app-network
      
  front-app:
    image: energy-mgmt-frontend
    # container_name: front-app
    build:
      context: ./energy-mgmt-frontend
      dockerfile: ./energy-mgmt-frontend/Dockerfile
    environment:
      NODE_ENV: production
    # ports:
    #   - 6581:4200
    # depends_on:
    #   - login-app
    #   - monitoring-app
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.front-app.rule=Host(`localhost`)"
      - "traefik.http.services.front-app.loadbalancer.server.port=6581"
    networks:
      - app-network

  login-app:
    image: energy-mgmt-login
    # container_name: login-app
    build:
      context: ./energy-mgmt-login
      dockerfile: ./energy-mgmt-login/Dockerfile
    # ports:
    #   - 6582:6582
    environment:
      DB_IP: BazaDateUser
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: root
      DB_DBNAME: user-db
      BACKEND_USER_HOST: host.docker.internal
      BACKEND_USER_PORT: 6584 
      BACKEND_DEVICE_HOST: host.docker.internal
      BACKEND_DEVICE_PORT: 6585 
    # depends_on:
    #   - user-app
    #   - device-app
    deploy:
      replicas: 4
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.login-app.rule=Host(`localhost`)"
      - "traefik.http.services.login-app.loadbalancer.server.port=6582"
    networks:
      - app-network

  user-app:
    image: energy-mgmt-user
    # container_name: user-app
    build:
      context: ./energy-mgmt-user
      dockerfile: ./energy-mgmt-user/Dockerfile
    # ports:
    #   - 6584:6584
    environment:
      DB_IP: BazaDateUser
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: root
      DB_DBNAME: user-db
    deploy:
      replicas: 4
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.user-app.rule=Host(`localhost`)"
      - "traefik.http.services.user-app.loadbalancer.server.port=6584"
    networks:
      - app-network

  device-app:
    image: energy-mgmt-devices
    # container_name: device-app
    build:
      context: ./energy-mgmt-devices
      dockerfile: ./energy-mgmt-devices/Dockerfile
    # ports:
    #   - 6585:6585
    environment:
      DB_IP: BazaDateDevices
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_DBNAME: device-db
    deploy:
      replicas: 4
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.device-app.rule=Host(`localhost`)"
      - "traefik.http.services.device-app.loadbalancer.server.port=6585"
    networks:
      - app-network

  monitoring-app:
    image: energy-mgmt-monitoring-comm
    # container_name: monitoring-app
    build:
      context: ./energy-mgmt-monitoring-comm
      dockerfile: ./energy-mgmt-monitoring-comm/Dockerfile
    # ports:
    #   - 6586:6586
    environment:
      DB_IP: BazaDateMonitoring
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_DBNAME: monitoring-db
    deploy:
      replicas: 4
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.monitoring-app.rule=Host(`localhost`)"
      - "traefik.http.services.monitoring-app.loadbalancer.server.port=6586"
    networks:
      - app-network

volumes:
  user_db_data:
  device_db_data:
  monitoring_db_data:

networks:
  app-network:
    driver: bridge

